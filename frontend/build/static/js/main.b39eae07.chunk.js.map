{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","data","setData","useEffect","axios","get","then","response","catch","error","className","src","logo","alt","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","ranked","i","length","document","getElementById","classList","add","remove","console","log","droppableId","provided","id","droppableProps","ref","innerRef","map","title","artist","draggableId","draggableProps","dragHandleProps","placeholder","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOAAe,MAA0B,iC,eC8F1BA,MAvFf,WAGE,MAAwBC,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAwCA,OApCAH,IAAMI,WAAU,WACdC,IAAMC,IAFQ,gCAGXC,MAAK,SAACC,GACLL,EAAQK,EAASN,KAAKA,SAEvBO,OAAM,SAAAC,SAGR,IA6BD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,yDACA,+FAEA,cAAC,IAAD,CAAiBC,UAhCvB,SAAyBC,GACvB,GAAKA,EAAOC,YAAZ,CAEA,IAAMC,EAAQC,MAAMC,KAAKlB,GACzB,EAAwBgB,EAAMG,OAAOL,EAAOM,OAAOC,MAAO,GAAnDC,EAAP,oBACAN,EAAMG,OAAOL,EAAOC,YAAYM,MAAO,EAAGC,GAI1C,IADA,IAAIC,GAAS,EACLC,EAAE,EAAGA,EAAER,EAAMS,OAAO,EAAGD,IAC1BR,EAAMQ,GAAG,GAAKR,EAAMQ,EAAE,GAAG,KAC1BD,GAAS,GAIVA,EACDG,SAASC,eAAe,UAAUC,UAAUC,IAAI,WAGhDH,SAASC,eAAe,UAAUC,UAAUE,OAAO,WAErDC,QAAQC,IAAIhB,GAEZf,EAAQe,KASJ,SACE,cAAC,IAAD,CAAWiB,YAAY,QAAvB,SACG,SAACC,GAAD,OACC,6CAAIC,GAAG,SAAS1B,UAAU,SAAYyB,EAASE,gBAA/C,IAA+DC,IAAKH,EAASI,SAA7E,UACGtC,EAAKuC,KAAI,WAA4BlB,GAAW,IAAD,mBAApCc,EAAoC,KAA1BK,GAA0B,WAAnBC,EAAmB,KAC9C,OACE,cAAC,IAAD,CAAoBC,YAAaP,EAAId,MAAOA,EAA5C,SACG,SAACa,GAAD,OACC,wDAAIG,IAAKH,EAASI,UAAcJ,EAASS,gBAAoBT,EAASU,iBAAtE,aACE,6CACeJ,EAAM,uBADrB,WAEWC,UALDN,MAYnBD,EAASW,qBAMlB,mBACEpC,UAAU,WACVqC,KAAK,2CACLC,OAAO,SACPC,IAAI,sBAJN,2CCrEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.b39eae07.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c3a347f7.svg\";","// Import libraries for React Web App\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  // initalize data array and update method using useState\n  const [data, setData] = React.useState([]);\n\n  //perform get request using axios library to local machine\n  const baseURL = \"http://localhost:8081/random\";\n  React.useEffect(() => {\n    axios.get(baseURL)\n      .then((response) => {\n        setData(response.data.data);\n      })\n      .catch(error => {\n        return;\n      });\n  }, []);\n\n  // function to update the order of the drag-and-drop list\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n\n    const items = Array.from(data);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    \n    // checks if list items in correct order\n    var ranked = true;\n    for(let i=0; i<items.length-1; i++) {\n      if(items[i][1] > items[i+1][1]) {\n        ranked = false;\n      }\n    }\n    // turn list elements green if in correct order\n    if(ranked) {\n      document.getElementById(\"toRank\").classList.add(\"correct\");\n    }\n    else {\n      document.getElementById(\"toRank\").classList.remove(\"correct\");\n    }\n    console.log(items);\n    // update data array to prevent display from reverting\n    setData(items);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Songs from the Top 100!</h1>\n        <h4>Rank from MOST to LEAST Popular -- Courtesy of Siddharth Shah</h4>\n        \n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <Droppable droppableId=\"songs\">\n            {(provided) => (\n              <ul id=\"toRank\" className=\"songs\" {...provided.droppableProps} ref={provided.innerRef}>\n                {data.map(([id, rank, title, artist], index) => {\n                  return (\n                    <Draggable key={id} draggableId={id} index={index}>\n                      {(provided) => (\n                        <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                          <p>\n                            Song Title: {title}<br/>\n                            Artist: {artist}\n                          </p>\n                        </li>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </DragDropContext>\n        \n        <a\n          className=\"App-link\"\n          href=\"https://www.billboard.com/charts/hot-100\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Visit Billboard Website\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}